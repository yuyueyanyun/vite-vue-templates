import{o as a,c as s,Q as n}from"./chunks/framework.ed17f42d.js";const e=n(`<h1 id="分布式版本控制系统" tabindex="-1">分布式版本控制系统 <a class="header-anchor" href="#分布式版本控制系统" aria-label="Permalink to &quot;分布式版本控制系统&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="windows-平台上安装" tabindex="-1">Windows 平台上安装 <a class="header-anchor" href="#windows-平台上安装" aria-label="Permalink to &quot;Windows 平台上安装&quot;">​</a></h3><blockquote><p>下载地址：<a href="https://git-scm.com/" target="_blank" rel="noreferrer">https://git-scm.com/</a></p></blockquote><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config --global user.name &quot;Your Name&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git config --global user.email &quot;email&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果用了 --global 选项，以后你所有的项目都会默认使用这里配置的用户信息。 如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><h2 id="创建版本库" tabindex="-1">创建版本库 <a class="header-anchor" href="#创建版本库" aria-label="Permalink to &quot;创建版本库&quot;">​</a></h2><h3 id="git-init" tabindex="-1">git init <a class="header-anchor" href="#git-init" aria-label="Permalink to &quot;git init&quot;">​</a></h3><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完后会在当前目录生成一个 .git 目录。</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git init newrepo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录。</p><h3 id="git-clone" tabindex="-1">git clone <a class="header-anchor" href="#git-clone" aria-label="Permalink to &quot;git clone&quot;">​</a></h3><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git clone &lt;repo&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从现有 Git 仓库中拷贝项目</p><h2 id="分支管理-branch" tabindex="-1">分支管理：branch <a class="header-anchor" href="#分支管理-branch" aria-label="Permalink to &quot;分支管理：branch&quot;">​</a></h2><h3 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-label="Permalink to &quot;创建分支&quot;">​</a></h3><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch (branchname)   创建分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout (branchname) 切换分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>git branch 没有参数时，会列出你在本地的分支。</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout -b (branchname) origin/master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>master 分支为基准，创建新分支并立即切换到该分支下 ###删除分支 删除本地分支</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch -d (branchname)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>删除远程分支</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push origin --delete (branchname)</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin :(branchname)  //推送空分支到远程,删除远程分支另一种实现</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="暂时保存-stash" tabindex="-1">暂时保存：stash <a class="header-anchor" href="#暂时保存-stash" aria-label="Permalink to &quot;暂时保存：stash&quot;">​</a></h2><p>暂时保存没有提交的工作。运行该命令后，所有没有commit的代码，都会暂时从工作区移除，回到上次commit时的状态。</p><blockquote><p>解决任务切换问题。如正在进行项目中某一部分的工作，这是又要转到其他分支上进行一些工作。</p></blockquote><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 暂时保存没有提交的工作</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash</span></span>
<span class="line"><span style="color:#A6ACCD;">// 实际应用中推荐给每个stash加一个message，用于记录版本，使用git stash save</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash save &quot;(message)&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 恢复最近一次stash的文件</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash pop</span></span>
<span class="line"><span style="color:#A6ACCD;">// 列出所有暂时保存的工作</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash list</span></span>
<span class="line"><span style="color:#A6ACCD;">// 恢复某个暂时保存的工作，默认使用最近的stash（即stash@{0}）</span></span>
<span class="line"><span style="color:#A6ACCD;"> git stash apply (stash@{1})</span></span>
<span class="line"><span style="color:#A6ACCD;">// 丢弃最近一次stash的文件</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash drop</span></span>
<span class="line"><span style="color:#A6ACCD;">// 删除所有的stash</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash clear</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="pull" tabindex="-1">pull <a class="header-anchor" href="#pull" aria-label="Permalink to &quot;pull&quot;">​</a></h2><p>以 rebase 的方式拉取远端 origin 的 release/xxxxxx 的代码</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git pull --rebase origin release/xxxxxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>建议使用rebase</p>`,32),l=[e],c=JSON.parse('{"title":"git","description":"","frontmatter":{"title":"git","lang":"zh-CN"},"headers":[],"relativePath":"zh-CN/other/tutorial/git.md"}'),i={name:"zh-CN/other/tutorial/git.md"},d=Object.assign(i,{setup(p){return(t,r)=>(a(),s("div",null,l))}});export{c as __pageData,d as default};
