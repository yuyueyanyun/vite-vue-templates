import{o as e,c as t,Q as a}from"./chunks/framework.ed17f42d.js";const r=a(`<h1 id="反射-reflection" tabindex="-1">反射 Reflection <a class="header-anchor" href="#反射-reflection" aria-label="Permalink to &quot;反射 Reflection&quot;">​</a></h1><h2 id="reflect-非构造函数" tabindex="-1">Reflect 非构造函数 <a class="header-anchor" href="#reflect-非构造函数" aria-label="Permalink to &quot;Reflect 非构造函数&quot;">​</a></h2><p>静态方法与 [proxy handler] 方法的命名相同。</p><h2 id="proxy-创建一个对象的代理" tabindex="-1">Proxy 创建一个对象的代理 <a class="header-anchor" href="#proxy-创建一个对象的代理" aria-label="Permalink to &quot;Proxy 创建一个对象的代理&quot;">​</a></h2><p>实现基本操作的拦截和自定义。</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const p = new Proxy(target, handler);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建一个可撤销的代理对象。返回值是一个对象：<code>{&quot;proxy&quot;: proxy, &quot;revoke&quot;: revoke}</code>;</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const revocable = Proxy.revocable(target, handler);</span></span>
<span class="line"><span style="color:#A6ACCD;">const proxy = revocable.proxy;</span></span>
<span class="line"><span style="color:#A6ACCD;">revocable.revoke();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</td></tr><tr><td>handler</td><td>通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</td></tr><tr><td>handler</td><td>通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</td></tr></tbody></table>`,10),n=[r],p=JSON.parse('{"title":"反射","description":"","frontmatter":{"title":"反射","lang":"zh-CN"},"headers":[],"relativePath":"zh-CN/other/javaScript/reflection.md"}'),s={name:"zh-CN/other/javaScript/reflection.md"},i=Object.assign(s,{setup(o){return(l,c)=>(e(),t("div",null,n))}});export{p as __pageData,i as default};
