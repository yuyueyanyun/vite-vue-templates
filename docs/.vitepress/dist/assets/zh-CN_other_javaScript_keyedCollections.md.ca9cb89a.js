import{o as a,c as s,Q as e}from"./chunks/framework.ed17f42d.js";const n=e(`<h1 id="使用键的集合对象" tabindex="-1">使用键的集合对象 <a class="header-anchor" href="#使用键的集合对象" aria-label="Permalink to &quot;使用键的集合对象&quot;">​</a></h1><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><p>键值对的集合，Map中的一个键<strong>只能出现一次</strong>, 任何值（对象或者基本类型）都可以作为一个键或一个值。</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const map = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">map.set(&#39;a&#39;, 1);</span></span>
<span class="line"><span style="color:#A6ACCD;">// const map = new Map([[&#39;a&#39;, &#39;1&#39;]]);</span></span>
<span class="line"><span style="color:#A6ACCD;">map.delete(&#39;a&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const map1 = new Map([[&#39;a&#39;, 1], [&#39;b&#39;, 2]]);</span></span>
<span class="line"><span style="color:#A6ACCD;">map1.forEach((value, key) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`\${key}：\${value}\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">// a：1  </span></span>
<span class="line"><span style="color:#A6ACCD;">// b：2</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(Array.from(map1, ([key, value]) =&gt; ({</span></span>
<span class="line"><span style="color:#A6ACCD;">  key,</span></span>
<span class="line"><span style="color:#A6ACCD;">  value,</span></span>
<span class="line"><span style="color:#A6ACCD;">})));</span></span>
<span class="line"><span style="color:#A6ACCD;">// [{key: &#39;a&#39;, value: 1}, {key: &#39;b&#39;, value: 2}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>合并 <strong>如果有重复的键值，则后面的会覆盖前面</strong></p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const first = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">const second = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">const merged = new Map([...first, ...second]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th>实例</th><th>描述</th></tr></thead><tbody><tr><td>Map.prototype.size</td><td>键值对数量</td></tr><tr><td>Map.prototype.clear()</td><td>移除所有的键值对。</td></tr><tr><td>Map.prototype.delete(<code>key</code>)</td><td>移除 Map 对象中指定的键值对。返回Boolean</td></tr><tr><td>Map.prototype.get(<code>key</code>)</td><td>返回指定键关联的值。若不存在返回<code>undefined</code></td></tr><tr><td>Map.prototype.has(<code>key</code>)</td><td>返回一个布尔值，表明是否存在。</td></tr><tr><td>Map.prototype.set(<code>key</code>, <code>value</code>)</td><td>设置与指定的键 key 关联的值，并返回 Map 对象。</td></tr><tr><td>Map.prototype.keys()</td><td>新的迭代对象，包含Map对象中所有的键</td></tr><tr><td>Map.prototype.values()</td><td>新的迭代对象，包含Map对象中所有的值</td></tr><tr><td>Map.prototype.entries()</td><td>新的迭代对象，键值对的 [key, value] 数组。</td></tr><tr><td>Map.prototype.forEach()</td><td>已插入顺序对键值分别调用一次。</td></tr></tbody></table><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><p>允许存储任何类型的唯一值。（NaN 和 undefined 都可以被存储在 Set 中，NaN 之间被视为相同的值）</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const set = new Set();</span></span>
<span class="line"><span style="color:#A6ACCD;">set.add(1);</span></span>
<span class="line"><span style="color:#A6ACCD;">set.add(2);</span></span>
<span class="line"><span style="color:#A6ACCD;">// const set = new Set([1, 2]);</span></span>
<span class="line"><span style="color:#A6ACCD;">set.delete(1);</span></span>
<span class="line"><span style="color:#A6ACCD;">set.clear();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>去重</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const numbers = [2,3,4,4,2,3,3,4,4,5,5,6,6,7,5,32,3,4,5]</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log([...new Set(numbers)]);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [2, 3, 4, 5, 6, 7, 32];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>string</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let mySet = new Set(&#39;India&#39;);  // Set {&#39;I&#39;, &#39;n&#39;, &#39;d&#39;, &#39;i&#39;, &#39;a&#39;}</span></span>
<span class="line"><span style="color:#A6ACCD;">mySet.size;  // 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><table><thead><tr><th>实例</th><th>描述</th></tr></thead><tbody><tr><td>Set.prototype.size</td><td>值的个数</td></tr><tr><td>Set.prototype.add(<code>value</code>)</td><td>尾部添加一个元素，返还 Set 对象。</td></tr><tr><td>Set.prototype.clear()</td><td>移除所有元素。</td></tr><tr><td>Set.prototype.delete(<code>key</code>)</td><td>移除值为 <code>value</code> 的元素。返回Boolean</td></tr><tr><td>Set.prototype.has(<code>key</code>)</td><td>返回一个布尔值，表明是否存在。</td></tr><tr><td>Set.prototype.keys()</td><td>新的迭代对象。</td></tr><tr><td>Set.prototype.values()</td><td>新的迭代对象。与<strong>keys()</strong> 方法相同。</td></tr><tr><td>Set.prototype.entries()</td><td>新的迭代对象。</td></tr><tr><td>Set.prototype.forEach()</td><td>已插入顺序对键值分别调用一次。</td></tr></tbody></table><h2 id="weakmap" tabindex="-1">WeakMap <a class="header-anchor" href="#weakmap" aria-label="Permalink to &quot;WeakMap&quot;">​</a></h2><h2 id="weakset" tabindex="-1">WeakSet <a class="header-anchor" href="#weakset" aria-label="Permalink to &quot;WeakSet&quot;">​</a></h2>`,18),t=[n],c=JSON.parse('{"title":"使用键的集合对象","description":"","frontmatter":{"title":"使用键的集合对象","lang":"zh-CN"},"headers":[],"relativePath":"zh-CN/other/javaScript/keyedCollections.md"}'),p={name:"zh-CN/other/javaScript/keyedCollections.md"},i=Object.assign(p,{setup(l){return(r,o)=>(a(),s("div",null,t))}});export{c as __pageData,i as default};
