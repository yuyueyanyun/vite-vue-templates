import{o as e,c as a,Q as r}from"./chunks/framework.ed17f42d.js";const s=r(`<h1 id="header" tabindex="-1">header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;header&quot;">​</a></h1><h2 id="referer" tabindex="-1">referer <a class="header-anchor" href="#referer" aria-label="Permalink to &quot;referer&quot;">​</a></h2><p>静态方法与 [proxy handler] 方法的命名相同。</p><h2 id="proxy-创建一个对象的代理" tabindex="-1">Proxy 创建一个对象的代理 <a class="header-anchor" href="#proxy-创建一个对象的代理" aria-label="Permalink to &quot;Proxy 创建一个对象的代理&quot;">​</a></h2><p>实现基本操作的拦截和自定义。</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const p = new Proxy(target, handler);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建一个可撤销的代理对象。返回值是一个对象：<code>{&quot;proxy&quot;: proxy, &quot;revoke&quot;: revoke}</code>;</p><div class="language-code line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const revocable = Proxy.revocable(target, handler);</span></span>
<span class="line"><span style="color:#A6ACCD;">const proxy = revocable.proxy;</span></span>
<span class="line"><span style="color:#A6ACCD;">revocable.revoke();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,8),n=[s],i=JSON.parse('{"title":"请求头","description":"","frontmatter":{"title":"请求头","lang":"zh-CN"},"headers":[],"relativePath":"zh-CN/other/http/header.md"}'),o={name:"zh-CN/other/http/header.md"},d=Object.assign(o,{setup(t){return(l,p)=>(e(),a("div",null,n))}});export{i as __pageData,d as default};
